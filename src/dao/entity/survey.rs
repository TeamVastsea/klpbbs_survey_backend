//! `SeaORM` Entity. Generated by sea-orm-codegen 0.12.15

use crate::dao::serialize_datetime_as_z;
use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq, Serialize, Deserialize)]
#[sea_orm(table_name = "survey")]
pub struct Model {
    #[sea_orm(primary_key)]
    pub id: i32,
    pub title: String,
    pub badge: String,
    pub description: String,
    pub image: String,
    #[serde(serialize_with = "serialize_datetime_as_z")]
    pub start_date: DateTime,
    #[serde(serialize_with = "serialize_datetime_as_z")]
    pub end_date: DateTime,
    pub allow_submit: bool,
    pub allow_view: bool,
    pub allow_judge: bool,
    pub allow_re_submit: bool,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_many = "super::page::Entity")]
    Page,
    #[sea_orm(has_many = "super::score::Entity")]
    Score,
}

impl Related<super::page::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Page.def()
    }
}

impl Related<super::score::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Score.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
