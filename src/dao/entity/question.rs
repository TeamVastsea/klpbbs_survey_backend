//! `SeaORM` Entity. Generated by sea-orm-codegen 0.12.15

use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(table_name = "question")]
pub struct Model {
    #[sea_orm(primary_key)]
    pub id: i32,
    pub page: i32,
    pub content: String,
    pub r#type: QuestionType,
    pub values: Option<String>,
    pub condition: Option<String>,
    pub required: bool,
    pub answer: Option<String>,
    pub all_points: Option<i32>,
    pub sub_points: Option<i32>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::page::Entity",
        from = "Column::Page",
        to = "super::page::Column::Id",
        on_update = "NoAction",
        on_delete = "Cascade"
    )]
    Page,
}

impl Related<super::page::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Page.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}

#[derive(EnumIter, DeriveActiveEnum, Eq, PartialEq, Copy, Clone, Debug, Serialize, Deserialize)]
#[sea_orm(rs_type = "i32", db_type = "Integer")]
pub enum QuestionType {
    Text = 1,
    SingleChoice = 2,
    MultipleChoice = 3,
    // File = 4,
}